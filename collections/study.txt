// let mut v = vec![1, 2, 3, 4];

// let third: &i32 = &v[2];

// v.push(5);

// println!("third element: {}", third);

// match v.get(2) {
//     Some(third) => println!("第三個元素: {}", third),
//     _ => println!("沒有元素"),
// }

// let mut v = vec![1, 2, 3, 4];
// for i in &mut v {
//     *i += 40;
//     println!("{}", i);
// }

enum SpreadsheetCell {
    Int(i32),
    Float(f64),
    Text(String),
}

fn main() {
    let row = vec![
        SpreadsheetCell::Int(3),
        SpreadsheetCell::Float(10.12),
        SpreadsheetCell::Text(String::from("藍色")),
    ];
}

fn main() {
    // let s1 = String::from("Hello ");
    // let s2 = String::from("world!");
    let s1 = String::from("Hello ");
    let s2 = "1";
    let s3 =  s1 + s2;
    println!("{} {} {}", 1, s2, s3);
}


use std::collections::HashMap;

fn main() {
    let mut scores = HashMap::new();

    scores.insert(String::from("blue team"), 10);
    scores.insert(String::from("red team"), 60);
    println!("{:?}", scores);
}


use std::collections::HashMap;

fn main() {
    let teams = vec![String::from("Blue team"), String::from("Red team")];
    let ini_scores = vec![10, 40];

    let mut scores: HashMap<_, _> =
        teams.into_iter().zip(ini_scores.into_iter()).collect();

    println!("{:?}", scores);
}


use std::collections::HashMap;

fn main() {
    let text = "hello world wonderful world";

    let mut map = HashMap::new();

    for word in text.split_whitespace() {
        let count = map.entry(word).or_insert(0);

        *count += 1;
        println!("{:?}", count);
    }

    println!("{:?}", map);
}
