// enumeration defination

enum IpAddKind {
    V4,
    V6
}

struct IpAddr {
    kind: IpAddKind,
    address: String,
}

fn main() {
    let home = IpAddr {
        kind: IpAddKind::V4,
        address: String::from("127.0.0.1")
    };

    let home = IpAddr {
        kind: IpAddKind::V6,
        address: String::from("::1")
    };

}

// enumeration with data type
enum IpAddKind {
    V4(u8, u8, u8, u8),
    V6(String),
}

fn main() {
    let home = IpAddKind::V4(127, 0, 0, 1);
    let loopback = IpAddKind::V6(String::from("::1"));

}

// enumeration with method
enum Message {
    Quit,
    Move { x: i32, y: i32 },
    Write(String),
    ChangeColor(i32, i32, i32),
}

impl Message {
    fn call (&self) {
        println!("hello");
    }
}

fn main() {
    let m = Message::Write(String::from("hello"));
    m.call()
}

// option

fn main() {
    let some_number = Some(5);
    let some_number = Some("字串");

    let absent_number: Option<i32> = None;
}

// match
enum Coin {
    Penny,
    Nickel,
    Dime,
    Quarter,
}

fn value_in_cents(coin: Coin) -> u8 {
    match coin {
        Coin::Penny => {
            println!("中了");
            1
        },
        Coin::Nickel => 5,
        Coin::Dime => 10,
        Coin::Quarter => 25,
    }
}

fn main() {
    println!("{}", value_in_cents(Coin::Penny))

}

// _ 佔位符
fn value_in_cents(coin: Coin) -> u8 {
    match coin {
        Coin::Penny => {
            println!("中了");
            1
        },
        Coin::Nickel => 5,
        _ => 0
    }
}
