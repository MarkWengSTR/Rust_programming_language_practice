struct User {
    username: String,
    email: String,
    sign_in_count: u64,
    active: bool,
}

fn main() {
    let user1 = build_user(String::from("xxx@email.com"), String::from("sstwe11"));

    let user2 = User {
        email: String::from("yyy@email.com"),
        username: String::from("mark222"),
        ..user1
    };
}

fn build_user(email: String, username: String) -> User {
    User {
        email,
        username,
        active: true,
        sign_in_count: 1,
    }
}

// 結構體程式範例1 - 未優化
fn main() {
    let width1 = 30;
    let height1 = 50;

    println!(
        "長方形的面積為 {} 平方像素。",
        area(width1, height1)
    );
}

fn area(width: u32, height: u32) -> u32 {
    width * height
}

// 結構體程式範例2 - 使用元組優化
fn main() {
    let rect1 = (30, 50);

    println!(
        "長方形的面積為 {} 平方像素。",
        area(rect1)
    );
}

fn area(dimension: (u32, u32)) -> u32 {
    dimension.0 * dimension.1
}


// 結構體程式範例3 - 使用結構體優化
struct Rectangle {
    width: u32,
    height: u32,
}

fn main() {
    let rect1 = Rectangle {
        width:30,
        height: 50,
    };

    println!(
        "長方形的面積為 {} 平方像素。",
        area(&rect1)
    );
}

fn area(rectangle: &Rectangle) -> u32 {
    rectangle.width * rectangle.height
}


// 用derive(Debug)印出沒有實作Display的東西
#[derive(Debug)]
struct Rectangle {
    width: u32,
    height: u32,
}

fn main() {
    let rect1 = Rectangle {
        width:30,
        height: 50,
    };

    println!("{:?}", rect1);
}


// 實例與實例互動
#[derive(Debug)]
struct Rectangle {
    width: u32,
    height: u32,
}

// 可以寫在一起，也再寫一個impl Rectangle
impl Rectangle {
    fn area(&self) -> u32 {
        self.width * self.height
    }

    fn can_hold(&self, other: &Rectangle) -> bool {
        self.width > other.width && self.height > other.height
    }
}

fn main() {
    let rect1 = Rectangle {
        width:30,
        height: 50,
    };

    let rect2 = Rectangle {
        width:10,
        height: 40,
    };

    let rect3 = Rectangle {
        width:60,
        height: 45,
    };

    println!("rect1 can hold rect2 ? {}", rect1.can_hold(&rect2));
    println!("rect1 can hold rect3 ? {}", rect1.can_hold(&rect3));
}

// 關聯函式
impl Rectangle {
    fn square(size: u32) -> Rectangle {
        Rectangle {
            width: size,
            height: size,
        }
    }
}

fn main() {
    let sq = Rectangle::square(2);
    println!("{}", sq.width)
}
